//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Payapps.Api
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OauthControllerApiClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public OauthControllerApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Oauth token
        /// </summary>
        /// <param name="authorization">base64string</param>
        /// <param name="content_Type">application/x-www-form-urlencoded</param>
        /// <returns>Get a token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenResponseDto> GetTokenAsync(string authorization, string content_Type, TokenRequestDto body)
        {
            return GetTokenAsync(authorization, content_Type, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Oauth token
        /// </summary>
        /// <param name="authorization">base64string</param>
        /// <param name="content_Type">application/x-www-form-urlencoded</param>
        /// <returns>Get a token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenResponseDto> GetTokenAsync(string authorization, string content_Type, TokenRequestDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/oauth/token");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenResponseDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Oauth refresh token
        /// </summary>
        /// <param name="authorization">base64string</param>
        /// <param name="content_Type">application/x-www-form-urlencoded</param>
        /// <returns>Get a token from refresh token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenResponseDto> GetRefreshTokenAsync(string authorization, string content_Type, RefreshTokenRequestDto body)
        {
            return GetRefreshTokenAsync(authorization, content_Type, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Oauth refresh token
        /// </summary>
        /// <param name="authorization">base64string</param>
        /// <param name="content_Type">application/x-www-form-urlencoded</param>
        /// <returns>Get a token from refresh token</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenResponseDto> GetRefreshTokenAsync(string authorization, string content_Type, RefreshTokenRequestDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/oauth/refresh-token");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenResponseDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthControllerApiClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AuthControllerApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// User details
        /// </summary>
        /// <returns>Get contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserDto> GetLoggedUserAsync()
        {
            return GetLoggedUserAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// User details
        /// </summary>
        /// <returns>Get contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserDto> GetLoggedUserAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/auth/me");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganisationsControllerApiClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public OrganisationsControllerApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Organisations search
        /// </summary>
        /// <returns>Search organisations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetSearchOrganisationsAsync(string name, string business_number, string email, string country)
        {
            return GetSearchOrganisationsAsync(name, business_number, email, country, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Organisations search
        /// </summary>
        /// <returns>Search organisations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetSearchOrganisationsAsync(string name, string business_number, string email, string country, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/organisations/search?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (business_number != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("business_number") + "=").Append(System.Uri.EscapeDataString(ConvertToString(business_number, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("country") + "=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get counterparties
        /// </summary>
        /// <returns>Get project list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CounterpartiesDto>> GetCounterpartiesAsync()
        {
            return GetCounterpartiesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get counterparties
        /// </summary>
        /// <returns>Get project list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CounterpartiesDto>> GetCounterpartiesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/organisations/counterparties");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CounterpartiesDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get organisation users
        /// </summary>
        /// <returns>Get organisation users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganisationUserDto>> GetUsersAsync()
        {
            return GetUsersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get organisation users
        /// </summary>
        /// <returns>Get organisation users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganisationUserDto>> GetUsersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/organisations/users");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrganisationUserDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectsControllerApiClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ProjectsControllerApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get project list
        /// </summary>
        /// <returns>Get project list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectSummaryDto>> GetAllProjectsAsync()
        {
            return GetAllProjectsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project list
        /// </summary>
        /// <returns>Get project list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectSummaryDto>> GetAllProjectsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/projects");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectSummaryDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Project create
        /// </summary>
        /// <returns>Create new project</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectDto> PostProjectAsync(ProjectCreateDto body)
        {
            return PostProjectAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Project create
        /// </summary>
        /// <returns>Create new project</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectDto> PostProjectAsync(ProjectCreateDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/projects");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Project search
        /// </summary>
        /// <returns>Search projects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectSummaryDto>> GetSearchProjectsAsync(string name, string project_ref, string external_integration_key_primary, string external_integration_key_secondary)
        {
            return GetSearchProjectsAsync(name, project_ref, external_integration_key_primary, external_integration_key_secondary, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Project search
        /// </summary>
        /// <returns>Search projects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectSummaryDto>> GetSearchProjectsAsync(string name, string project_ref, string external_integration_key_primary, string external_integration_key_secondary, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/projects/search?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (project_ref != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("project_ref") + "=").Append(System.Uri.EscapeDataString(ConvertToString(project_ref, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (external_integration_key_primary != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("external_integration_key_primary") + "=").Append(System.Uri.EscapeDataString(ConvertToString(external_integration_key_primary, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (external_integration_key_secondary != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("external_integration_key_secondary") + "=").Append(System.Uri.EscapeDataString(ConvertToString(external_integration_key_secondary, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectSummaryDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Project details
        /// </summary>
        /// <returns>Get project</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectDto> GetProjectAsync(double id)
        {
            return GetProjectAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Project details
        /// </summary>
        /// <returns>Get project</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectDto> GetProjectAsync(double id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/projects/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Project update
        /// </summary>
        /// <returns>Update a project</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectDto> PatchProjectAsync(double id, ProjectUpdateDto body)
        {
            return PatchProjectAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Project update
        /// </summary>
        /// <returns>Update a project</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectDto> PatchProjectAsync(double id, ProjectUpdateDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/projects/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Project summary
        /// </summary>
        /// <returns>Get project summary</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectSummaryDto>> GetProjectSummaryAsync(double id)
        {
            return GetProjectSummaryAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Project summary
        /// </summary>
        /// <returns>Get project summary</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectSummaryDto>> GetProjectSummaryAsync(double id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/projects/{id}/summary");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectSummaryDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Project contracts
        /// </summary>
        /// <returns>Get project contract list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectContractsDto>> GetProjectContractsAsync(double id)
        {
            return GetProjectContractsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Project contracts
        /// </summary>
        /// <returns>Get project contract list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectContractsDto>> GetProjectContractsAsync(double id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/projects/{id}/contracts");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectContractsDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Project payapps
        /// </summary>
        /// <returns>Get project payapps list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetProjectClaimsAsync(double id, Status status)
        {
            return GetProjectClaimsAsync(id, status, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Project payapps
        /// </summary>
        /// <returns>Get project payapps list</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetProjectClaimsAsync(double id, Status status, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (status == null)
                throw new System.ArgumentNullException("status");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/projects/{id}/payapps/{status}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{status}", System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractsControllerApiClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ContractsControllerApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Contract create
        /// </summary>
        /// <returns>Create new contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PostContractAsync(ContractCreateDto body)
        {
            return PostContractAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Contract create
        /// </summary>
        /// <returns>Create new contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostContractAsync(ContractCreateDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Contract details
        /// </summary>
        /// <returns>Get contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContractDto> GetContractAsync(double id)
        {
            return GetContractAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Contract details
        /// </summary>
        /// <returns>Get contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContractDto> GetContractAsync(double id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContractDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Contract update
        /// </summary>
        /// <returns>Update a contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContractDto> PatchContractAsync(double id, ContractUpdateDto body)
        {
            return PatchContractAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Contract update
        /// </summary>
        /// <returns>Update a contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContractDto> PatchContractAsync(double id, ContractUpdateDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContractDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Contract summary
        /// </summary>
        /// <returns>Get contract summary</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContractSummaryDto> GetContractSummaryAsync(double id)
        {
            return GetContractSummaryAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Contract summary
        /// </summary>
        /// <returns>Get contract summary</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContractSummaryDto> GetContractSummaryAsync(double id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts/{id}/summary");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContractSummaryDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Contract payapps
        /// </summary>
        /// <returns>Get contract payapps</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PayappsListDto>> GetContractPayappsAsync(double id)
        {
            return GetContractPayappsAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Contract payapps
        /// </summary>
        /// <returns>Get contract payapps</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PayappsListDto>> GetContractPayappsAsync(double id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts/{id}/payapps");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PayappsListDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Link contract
        /// </summary>
        /// <returns>Link contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContractDto> PatchLinkContractAsync(double id, ContractLinkDto body)
        {
            return PatchLinkContractAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Link contract
        /// </summary>
        /// <returns>Link contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContractDto> PatchLinkContractAsync(double id, ContractLinkDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts/{id}/link");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContractDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Contract variation
        /// </summary>
        /// <returns>Update contract variation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContractVariationDto> PutContractVariationAsync(double id, double contractline_id, ContractVariationDto body)
        {
            return PutContractVariationAsync(id, contractline_id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Contract variation
        /// </summary>
        /// <returns>Update contract variation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContractVariationDto> PutContractVariationAsync(double id, double contractline_id, ContractVariationDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (contractline_id == null)
                throw new System.ArgumentNullException("contractline_id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts/{id}/variations/{contractline_id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{contractline_id}", System.Uri.EscapeDataString(ConvertToString(contractline_id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContractVariationDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Contractlines
        /// </summary>
        /// <returns>Get contract lines</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContractLineDto> GetContractLinesAsync(double id, bool? include_deleted, Approval_status? approval_status)
        {
            return GetContractLinesAsync(id, include_deleted, approval_status, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Contractlines
        /// </summary>
        /// <returns>Get contract lines</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContractLineDto> GetContractLinesAsync(double id, bool? include_deleted, Approval_status? approval_status, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts/{id}/contractlines?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (include_deleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include_deleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include_deleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (approval_status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("approval_status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(approval_status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContractLineDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Contract variations
        /// </summary>
        /// <returns>Update contract variations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContractDto> PutContractVariationsAsync(double id, ContractVariationsDto body)
        {
            return PutContractVariationsAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Contract variations
        /// </summary>
        /// <returns>Update contract variations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContractDto> PutContractVariationsAsync(double id, ContractVariationsDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts/{id}/variations");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContractDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Contract lineitems
        /// </summary>
        /// <returns>Update contract lineitems</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContractDto> PutContractLineitemsAsync(double id, ContractLineitemsDto body)
        {
            return PutContractLineitemsAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Contract lineitems
        /// </summary>
        /// <returns>Update contract lineitems</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContractDto> PutContractLineitemsAsync(double id, ContractLineitemsDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts/{id}/lineitems");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContractDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Publish Contract
        /// </summary>
        /// <returns>Publish contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContractDto> PutContractPublishAsync(double id, ContractPublishDto body)
        {
            return PutContractPublishAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Publish Contract
        /// </summary>
        /// <returns>Publish contract</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContractDto> PutContractPublishAsync(double id, ContractPublishDto body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/contracts/{id}/publish");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContractDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappsControllerApiClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PayappsControllerApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get all payapps
        /// </summary>
        /// <param name="start_date">yyyy-mm-dd</param>
        /// <param name="end_date">yyyy-mm-dd</param>
        /// <returns>Get all payapps</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PayappsListItemDto>> GetPayappsAsync(double? project_id, string start_date, string end_date, PayappStatusGroupEnum? claim_status)
        {
            return GetPayappsAsync(project_id, start_date, end_date, claim_status, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all payapps
        /// </summary>
        /// <param name="start_date">yyyy-mm-dd</param>
        /// <param name="end_date">yyyy-mm-dd</param>
        /// <returns>Get all payapps</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PayappsListItemDto>> GetPayappsAsync(double? project_id, string start_date, string end_date, PayappStatusGroupEnum? claim_status, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/payapps?");
            if (project_id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("project_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(project_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (end_date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("end_date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (claim_status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("claim_status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(claim_status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PayappsListItemDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Payapp details
        /// </summary>
        /// <returns>Get payapp</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayappDto> GetPayappAsync(double id)
        {
            return GetPayappAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Payapp details
        /// </summary>
        /// <returns>Get payapp</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayappDto> GetPayappAsync(double id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/payapps/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayappDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Payapp invoice
        /// </summary>
        /// <returns>Get payapp invoice</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayappsInvoiceDto> GetPayappInvoiceAsync(double id)
        {
            return GetPayappInvoiceAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Payapp invoice
        /// </summary>
        /// <returns>Get payapp invoice</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayappsInvoiceDto> GetPayappInvoiceAsync(double id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/payapps/{id}/invoice");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayappsInvoiceDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenRequestDto
    {
        [Newtonsoft.Json.JsonProperty("grant_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TokenRequestDtoGrant_type Grant_type { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenResponseDto
    {
        [Newtonsoft.Json.JsonProperty("accessToken", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccessToken { get; set; }

        [Newtonsoft.Json.JsonProperty("accessTokenExpiresAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset AccessTokenExpiresAt { get; set; }

        [Newtonsoft.Json.JsonProperty("refreshToken", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RefreshToken { get; set; }

        [Newtonsoft.Json.JsonProperty("refreshTokenExpiresAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset RefreshTokenExpiresAt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshTokenRequestDto
    {
        [Newtonsoft.Json.JsonProperty("grant_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RefreshTokenRequestDtoGrant_type Grant_type { get; set; }

        [Newtonsoft.Json.JsonProperty("refresh_token", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Refresh_token { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation_id", Required = Newtonsoft.Json.Required.Always)]
        public double Organisation_id { get; set; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Organisation { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CounterpartiesDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("md_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Md_name { get; set; }

        [Newtonsoft.Json.JsonProperty("md_phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Md_phone { get; set; }

        [Newtonsoft.Json.JsonProperty("md_email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Md_email { get; set; }

        [Newtonsoft.Json.JsonProperty("business_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Business_number { get; set; }

        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address2 { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Province { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Postcode { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by_org", Required = Newtonsoft.Json.Required.Always)]
        public double Created_by_org { get; set; }

        [Newtonsoft.Json.JsonProperty("counterparty_role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Counterparty_role { get; set; }

        [Newtonsoft.Json.JsonProperty("user_organisation", Required = Newtonsoft.Json.Required.Always)]
        public bool User_organisation { get; set; }

        [Newtonsoft.Json.JsonProperty("num_contracts", Required = Newtonsoft.Json.Required.Always)]
        public double Num_contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("value_contracts", Required = Newtonsoft.Json.Required.Always)]
        public double Value_contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("num_pending_claims", Required = Newtonsoft.Json.Required.Always)]
        public double Num_pending_claims { get; set; }

        [Newtonsoft.Json.JsonProperty("value_pending_claims", Required = Newtonsoft.Json.Required.Always)]
        public double Value_pending_claims { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganisationUserDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation_id", Required = Newtonsoft.Json.Required.Always)]
        public double Organisation_id { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("mobile_phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Mobile_phone { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Permissions { get; set; }

        [Newtonsoft.Json.JsonProperty("login_count", Required = Newtonsoft.Json.Required.Always)]
        public double Login_count { get; set; }

        [Newtonsoft.Json.JsonProperty("primary_contact_count", Required = Newtonsoft.Json.Required.Always)]
        public double Primary_contact_count { get; set; }

        [Newtonsoft.Json.JsonProperty("authority_limit", Required = Newtonsoft.Json.Required.Always)]
        public double Authority_limit { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Disabled_at { get; set; }

        [Newtonsoft.Json.JsonProperty("accepted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Accepted_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectSummaryDto
    {
        [Newtonsoft.Json.JsonProperty("included_contra_charges", Required = Newtonsoft.Json.Required.Always)]
        public double Included_contra_charges { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("project_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Project_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("number_of_contracts", Required = Newtonsoft.Json.Required.Always)]
        public double Number_of_contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("total_works", Required = Newtonsoft.Json.Required.Always)]
        public double Total_works { get; set; }

        [Newtonsoft.Json.JsonProperty("percentage_complete", Required = Newtonsoft.Json.Required.Always)]
        public double Percentage_complete { get; set; }

        [Newtonsoft.Json.JsonProperty("included_variations", Required = Newtonsoft.Json.Required.Always)]
        public double Included_variations { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_receivable", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_receivable { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_payable", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_payable { get; set; }

        [Newtonsoft.Json.JsonProperty("num_draft_contracts", Required = Newtonsoft.Json.Required.Always)]
        public double Num_draft_contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("num_draft_claims", Required = Newtonsoft.Json.Required.Always)]
        public double Num_draft_claims { get; set; }

        [Newtonsoft.Json.JsonProperty("num_pending_claims", Required = Newtonsoft.Json.Required.Always)]
        public double Num_pending_claims { get; set; }

        [Newtonsoft.Json.JsonProperty("num_overdue_claims", Required = Newtonsoft.Json.Required.Always)]
        public double Num_overdue_claims { get; set; }

        [Newtonsoft.Json.JsonProperty("num_pln_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Num_pln_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("num_pln_draft", Required = Newtonsoft.Json.Required.Always)]
        public double Num_pln_draft { get; set; }

        [Newtonsoft.Json.JsonProperty("archived_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Archived_at { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Deleted_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectAddressDto
    {
        [Newtonsoft.Json.JsonProperty("address_line_1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address_line_1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address_line_2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address_line_2 { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Province { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postcode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectUsersDto
    {
        /// <summary>
        /// List of permissions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        public double Permissions { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Always)]
        public double Sequence { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectCategoryDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProjectUsersDto> Users { get; set; } = new System.Collections.ObjectModel.Collection<ProjectUsersDto>();

        [Newtonsoft.Json.JsonProperty("project_category_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Project_category_name { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectPermissionsDto
    {
        [Newtonsoft.Json.JsonProperty("project_categories", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProjectCategoryDto> Project_categories { get; set; } = new System.Collections.ObjectModel.Collection<ProjectCategoryDto>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectClaimScheduleDto
    {
        /// <summary>
        /// Use negative number for new schedule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("due_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("end_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string End_date { get; set; }

        [Newtonsoft.Json.JsonProperty("reminder_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reminder_date { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectClaimCycleDto
    {
        /// <summary>
        /// Only required if reminder_schedule = CUSTOM; Remove items from the list to delete them;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("claim_schedules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectClaimScheduleDto> Claim_schedules { get; set; }

        /// <summary>
        /// Only relevant if reminder_schedule is FORTNIGHTLY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fortnightly_start_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Fortnightly_start_date { get; set; }

        /// <summary>
        /// Only relevant if reminder_schedule is FORTNIGHTLY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reminder_days_pre_due_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double Reminder_days_pre_due_date { get; set; }

        /// <summary>
        /// Only relevant if reminder_schedule is FORTNIGHTLY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period_end_from_due_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Period_end_from_due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("reminder_schedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectClaimCycleDtoReminder_schedule Reminder_schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("reminder_day_of_month", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, 31D)]
        public double Reminder_day_of_month { get; set; }

        [Newtonsoft.Json.JsonProperty("period_end_day_of_month", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, 31D)]
        public double Period_end_day_of_month { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_due_day_of_month", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, 31D)]
        public double Claim_due_day_of_month { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectDto
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProjectAddressDto Address { get; set; } = new ProjectAddressDto();

        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProjectPermissionsDto Permissions { get; set; } = new ProjectPermissionsDto();

        [Newtonsoft.Json.JsonProperty("claim_cycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProjectClaimCycleDto Claim_cycle { get; set; } = new ProjectClaimCycleDto();

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("project_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Project_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("commencement_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Commencement_date { get; set; }

        [Newtonsoft.Json.JsonProperty("completion_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Completion_date { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_primary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_secondary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_secondary { get; set; }

        [Newtonsoft.Json.JsonProperty("enforce_approval_seq_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Enforce_approval_seq_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("authority_limits_enabled_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Authority_limits_enabled_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("multiapproval_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Multiapproval_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Deleted_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectContractsDto
    {
        /// <summary>
        /// Contract reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contract_ref { get; set; }

        /// <summary>
        /// List of contract statuses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectContractsDtoStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("counterparty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Counterparty { get; set; }

        [Newtonsoft.Json.JsonProperty("project_name", Required = Newtonsoft.Json.Required.Always)]
        public double Project_name { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("total_works", Required = Newtonsoft.Json.Required.Always)]
        public double Total_works { get; set; }

        [Newtonsoft.Json.JsonProperty("percentage_complete", Required = Newtonsoft.Json.Required.Always)]
        public double Percentage_complete { get; set; }

        [Newtonsoft.Json.JsonProperty("my_role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string My_role { get; set; }

        [Newtonsoft.Json.JsonProperty("draft_claim", Required = Newtonsoft.Json.Required.Always)]
        public bool Draft_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("number_of_claims", Required = Newtonsoft.Json.Required.Always)]
        public double Number_of_claims { get; set; }

        [Newtonsoft.Json.JsonProperty("prac_complete_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Prac_complete_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("final_complete_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Final_complete_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_pc_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Claim_pc_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_fc_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Claim_fc_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("self_assess_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Self_assess_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("variable_budget_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Variable_budget_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Province { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("num_pln_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Num_pln_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("num_pln_draft", Required = Newtonsoft.Json.Required.Always)]
        public double Num_pln_draft { get; set; }

        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public double Project_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectCreateDto
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProjectAddressDto Address { get; set; } = new ProjectAddressDto();

        [Newtonsoft.Json.JsonProperty("claim_cycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProjectClaimCycleDto Claim_cycle { get; set; } = new ProjectClaimCycleDto();

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("project_ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Project_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("commencement_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Commencement_date { get; set; }

        [Newtonsoft.Json.JsonProperty("completion_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Completion_date { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_integration_key_primary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_secondary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_integration_key_secondary { get; set; }

        [Newtonsoft.Json.JsonProperty("enforce_approval_seq_ind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enforce_approval_seq_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("authority_limits_enabled_ind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Authority_limits_enabled_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("multiapproval_ind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Multiapproval_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Deleted_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectUpdateDto
    {
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProjectPermissionsDto Permissions { get; set; } = new ProjectPermissionsDto();

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProjectAddressDto Address { get; set; } = new ProjectAddressDto();

        [Newtonsoft.Json.JsonProperty("claim_cycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ProjectClaimCycleDto Claim_cycle { get; set; } = new ProjectClaimCycleDto();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("project_ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Project_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("commencement_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Commencement_date { get; set; }

        [Newtonsoft.Json.JsonProperty("completion_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Completion_date { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_integration_key_primary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_secondary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_integration_key_secondary { get; set; }

        [Newtonsoft.Json.JsonProperty("enforce_approval_seq_ind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enforce_approval_seq_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("authority_limits_enabled_ind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Authority_limits_enabled_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("multiapproval_ind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Multiapproval_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Deleted_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractAddressDto
    {
        [Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Province { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractRetentionItemDto
    {
        /// <summary>
        /// Retention type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractRetentionItemDtoType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Percent { get; set; }

        [Newtonsoft.Json.JsonProperty("accumulation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Accumulation { get; set; }

        [Newtonsoft.Json.JsonProperty("cap", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Cap { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractRetentionDto
    {
        [Newtonsoft.Json.JsonProperty("original", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractRetentionItemDto Original { get; set; } = new ContractRetentionItemDto();

        [Newtonsoft.Json.JsonProperty("variation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractRetentionItemDto Variation { get; set; } = new ContractRetentionItemDto();

        [Newtonsoft.Json.JsonProperty("contra", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractRetentionItemDto Contra { get; set; } = new ContractRetentionItemDto();

        [Newtonsoft.Json.JsonProperty("release", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Release { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractRoleDto
    {
        [Newtonsoft.Json.JsonProperty("contract_role_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractRoleDtoContract_role_type Contract_role_type { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation_id", Required = Newtonsoft.Json.Required.Always)]
        public double Organisation_id { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation_entity_id", Required = Newtonsoft.Json.Required.Always)]
        public double Organisation_entity_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractlineLineDto
    {
        /// <summary>
        /// Use negative value to create a new line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Type { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by_organisation", Required = Newtonsoft.Json.Required.Always)]
        public double Created_by_organisation { get; set; }

        [Newtonsoft.Json.JsonProperty("ret_excl_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Ret_excl_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("variable_budget_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Variable_budget_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("lump_sum_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Lump_sum_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("unit_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit_type { get; set; }

        [Newtonsoft.Json.JsonProperty("qty", Required = Newtonsoft.Json.Required.Always)]
        public double Qty { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public double Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_primary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_secondary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_secondary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_tertiary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_tertiary { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("forecast_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Forecast_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("locked_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Locked_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_amount", Required = Newtonsoft.Json.Required.Always)]
        public double Recoverable_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Recoverable_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Recoverable_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("subcontractor_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subcontractor_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("var_origination_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Var_origination_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractlineNoteDto
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Type { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractlineHeadingDto
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Type { get; set; }

        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Nodes> Nodes { get; set; } = new System.Collections.ObjectModel.Collection<Nodes>();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractlineSectionDto
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Type { get; set; }

        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Nodes2> Nodes { get; set; } = new System.Collections.ObjectModel.Collection<Nodes2>();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractInvitationDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Province { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Postcode { get; set; }

        [Newtonsoft.Json.JsonProperty("md_email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Md_email { get; set; }

        [Newtonsoft.Json.JsonProperty("md_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Md_name { get; set; }

        [Newtonsoft.Json.JsonProperty("md_phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Md_phone { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractClaimScheduleDto
    {
        /// <summary>
        /// Use negative number for new schedule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("due_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("end_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string End_date { get; set; }

        [Newtonsoft.Json.JsonProperty("reminder_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reminder_date { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractClaimCycleDto
    {
        /// <summary>
        /// Only required if reminder_schedule = CUSTOM; Remove items from the list to delete them;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("claim_schedules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractClaimScheduleDto> Claim_schedules { get; set; } = new System.Collections.ObjectModel.Collection<ContractClaimScheduleDto>();

        /// <summary>
        /// Only relevant if reminder_schedule is FORTNIGHTLY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fortnightly_start_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Fortnightly_start_date { get; set; }

        /// <summary>
        /// Only relevant if reminder_schedule is FORTNIGHTLY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reminder_days_pre_due_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Reminder_days_pre_due_date { get; set; }

        /// <summary>
        /// Only relevant if reminder_schedule is FORTNIGHTLY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("period_end_from_due_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Period_end_from_due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("reminder_schedule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractClaimCycleDtoReminder_schedule Reminder_schedule { get; set; }

        [Newtonsoft.Json.JsonProperty("reminder_day_of_month", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, 31D)]
        public double Reminder_day_of_month { get; set; }

        [Newtonsoft.Json.JsonProperty("period_end_day_of_month", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1D, 31D)]
        public double Period_end_day_of_month { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_due_day_of_month", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1D, 31D)]
        public double Claim_due_day_of_month { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractCreateDto
    {
        /// <summary>
        /// Contract Reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ref { get; set; }

        /// <summary>
        /// Contract basis type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_basis", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractCreateDtoContract_basis Contract_basis { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractAddressDto Address { get; set; } = new ContractAddressDto();

        [Newtonsoft.Json.JsonProperty("retention", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractRetentionDto Retention { get; set; } = new ContractRetentionDto();

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractRoleDto> Roles { get; set; } = new System.Collections.ObjectModel.Collection<ContractRoleDto>();

        [Newtonsoft.Json.JsonProperty("lineitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractlineSectionDto> Lineitems { get; set; } = new System.Collections.ObjectModel.Collection<ContractlineSectionDto>();

        /// <summary>
        /// Only required if roles.length = 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invitation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractInvitationDto Invitation { get; set; } = new ContractInvitationDto();

        [Newtonsoft.Json.JsonProperty("claim_cycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractClaimCycleDto Claim_cycle { get; set; } = new ContractClaimCycleDto();

        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public double Project_id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_signed_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_signed_date { get; set; }

        [Newtonsoft.Json.JsonProperty("commencement_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commencement_date { get; set; }

        [Newtonsoft.Json.JsonProperty("completion_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Completion_date { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_primary { get; set; }

        [Newtonsoft.Json.JsonProperty("dlp_num_days", Required = Newtonsoft.Json.Required.Always)]
        public double Dlp_num_days { get; set; }

        [Newtonsoft.Json.JsonProperty("vat_reverse_charge_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Vat_reverse_charge_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("days_to_approve", Required = Newtonsoft.Json.Required.Always)]
        public double Days_to_approve { get; set; }

        [Newtonsoft.Json.JsonProperty("days_to_pay", Required = Newtonsoft.Json.Required.Always)]
        public double Days_to_pay { get; set; }

        [Newtonsoft.Json.JsonProperty("prac_complete_min_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Prac_complete_min_pct { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractTotalsAtdDto
    {
        [Newtonsoft.Json.JsonProperty("contract_works", Required = Newtonsoft.Json.Required.Always)]
        public double Contract_works { get; set; }

        [Newtonsoft.Json.JsonProperty("materials_on_site", Required = Newtonsoft.Json.Required.Always)]
        public double Materials_on_site { get; set; }

        [Newtonsoft.Json.JsonProperty("contra_charges", Required = Newtonsoft.Json.Required.Always)]
        public double Contra_charges { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_variations", Required = Newtonsoft.Json.Required.Always)]
        public double Approved_variations { get; set; }

        [Newtonsoft.Json.JsonProperty("other_variations", Required = Newtonsoft.Json.Required.Always)]
        public double Other_variations { get; set; }

        [Newtonsoft.Json.JsonProperty("rejected_variations", Required = Newtonsoft.Json.Required.Always)]
        public double Rejected_variations { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public double Total { get; set; }

        [Newtonsoft.Json.JsonProperty("retention", Required = Newtonsoft.Json.Required.Always)]
        public double Retention { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractTotalsWcDto
    {
        [Newtonsoft.Json.JsonProperty("contract_works", Required = Newtonsoft.Json.Required.Always)]
        public double Contract_works { get; set; }

        [Newtonsoft.Json.JsonProperty("contra_charges", Required = Newtonsoft.Json.Required.Always)]
        public double Contra_charges { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_variations", Required = Newtonsoft.Json.Required.Always)]
        public double Approved_variations { get; set; }

        [Newtonsoft.Json.JsonProperty("other_variations", Required = Newtonsoft.Json.Required.Always)]
        public double Other_variations { get; set; }

        [Newtonsoft.Json.JsonProperty("rejected_variations", Required = Newtonsoft.Json.Required.Always)]
        public double Rejected_variations { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public double Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractTotalsDto
    {
        [Newtonsoft.Json.JsonProperty("approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractTotalsAtdDto Approved_to_date { get; set; } = new ContractTotalsAtdDto();

        [Newtonsoft.Json.JsonProperty("when_complete", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractTotalsWcDto When_complete { get; set; } = new ContractTotalsWcDto();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractCounterpartyPrimaryContactDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("mobile_phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Mobile_phone { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractCounterpartyDto
    {
        [Newtonsoft.Json.JsonProperty("primary_contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractCounterpartyPrimaryContactDto Primary_contact { get; set; } = new ContractCounterpartyPrimaryContactDto();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("trading_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Trading_name { get; set; }

        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address2 { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Postcode { get; set; }

        [Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Province { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("business_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Business_number { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractDto
    {
        /// <summary>
        /// Contract status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractDtoContract_status Contract_status { get; set; }

        /// <summary>
        /// Contract basis type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_basis", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractDtoContract_basis Contract_basis { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_cycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractClaimCycleDto Claim_cycle { get; set; } = new ContractClaimCycleDto();

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractAddressDto Address { get; set; } = new ContractAddressDto();

        /// <summary>
        /// CIS withholding
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labour_tax_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Labour_tax_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("retention", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractRetentionDto Retention { get; set; } = new ContractRetentionDto();

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractRoleDto> Roles { get; set; } = new System.Collections.ObjectModel.Collection<ContractRoleDto>();

        [Newtonsoft.Json.JsonProperty("lineitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractlineSectionDto> Lineitems { get; set; } = new System.Collections.ObjectModel.Collection<ContractlineSectionDto>();

        [Newtonsoft.Json.JsonProperty("variationitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractlineSectionDto> Variationitems { get; set; } = new System.Collections.ObjectModel.Collection<ContractlineSectionDto>();

        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractTotalsDto Totals { get; set; } = new ContractTotalsDto();

        [Newtonsoft.Json.JsonProperty("counterparty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractCounterpartyDto Counterparty { get; set; } = new ContractCounterpartyDto();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation_id", Required = Newtonsoft.Json.Required.Always)]
        public double Organisation_id { get; set; }

        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public double Project_id { get; set; }

        [Newtonsoft.Json.JsonProperty("project_category_id", Required = Newtonsoft.Json.Required.Always)]
        public double Project_category_id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("dlp_num_days", Required = Newtonsoft.Json.Required.Always)]
        public double Dlp_num_days { get; set; }

        [Newtonsoft.Json.JsonProperty("first_claim_seq_no", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First_claim_seq_no { get; set; }

        [Newtonsoft.Json.JsonProperty("prac_complete_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Prac_complete_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("final_complete_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Final_complete_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("prac_complete_min_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Prac_complete_min_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_primary { get; set; }

        [Newtonsoft.Json.JsonProperty("submission_instruction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Submission_instruction { get; set; }

        [Newtonsoft.Json.JsonProperty("self_assess_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Self_assess_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("rcti", Required = Newtonsoft.Json.Required.Always)]
        public bool Rcti { get; set; }

        [Newtonsoft.Json.JsonProperty("compliance_enabled_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Compliance_enabled_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ref { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_percentage", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_percentage { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("days_to_approve", Required = Newtonsoft.Json.Required.Always)]
        public double Days_to_approve { get; set; }

        [Newtonsoft.Json.JsonProperty("days_to_pay", Required = Newtonsoft.Json.Required.Always)]
        public double Days_to_pay { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("pln_deadline_days_before", Required = Newtonsoft.Json.Required.Always)]
        public double Pln_deadline_days_before { get; set; }

        [Newtonsoft.Json.JsonProperty("materials_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Materials_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("prac_complete_date", Required = Newtonsoft.Json.Required.Always)]
        public bool Prac_complete_date { get; set; }

        [Newtonsoft.Json.JsonProperty("enforce_variation_headings", Required = Newtonsoft.Json.Required.Always)]
        public bool Enforce_variation_headings { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_coefficient", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_coefficient { get; set; }

        [Newtonsoft.Json.JsonProperty("my_role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractDtoMy_role My_role { get; set; }

        [Newtonsoft.Json.JsonProperty("can_delete", Required = Newtonsoft.Json.Required.Always)]
        public bool Can_delete { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_signed_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_signed_date { get; set; }

        [Newtonsoft.Json.JsonProperty("commencement_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commencement_date { get; set; }

        [Newtonsoft.Json.JsonProperty("completion_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Completion_date { get; set; }

        [Newtonsoft.Json.JsonProperty("vat_reverse_charge_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Vat_reverse_charge_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation_contract_type_id", Required = Newtonsoft.Json.Required.Always)]
        public double Organisation_contract_type_id { get; set; }

        [Newtonsoft.Json.JsonProperty("has_materiallines", Required = Newtonsoft.Json.Required.Always)]
        public bool Has_materiallines { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_summary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Contract_summary { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("variable_budget_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Variable_budget_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("has_draft_claim", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Has_draft_claim { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("claim_prefix_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claim_prefix_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("invoice_creator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractDtoInvoice_creator Invoice_creator { get; set; }

        [Newtonsoft.Json.JsonProperty("trade_type_id", Required = Newtonsoft.Json.Required.Always)]
        public double Trade_type_id { get; set; }

        [Newtonsoft.Json.JsonProperty("rcti_footer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Rcti_footer { get; set; }

        [Newtonsoft.Json.JsonProperty("rcti_landscape", Required = Newtonsoft.Json.Required.Always)]
        public bool Rcti_landscape { get; set; }

        [Newtonsoft.Json.JsonProperty("integration_metadata", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Integration_metadata { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("suggested_users", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Suggested_users { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("email_enabled_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Email_enabled_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_charge_waived_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Claim_charge_waived_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("max_approval_override_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Max_approval_override_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("variation_negotiation", Required = Newtonsoft.Json.Required.Always)]
        public bool Variation_negotiation { get; set; }

        [Newtonsoft.Json.JsonProperty("invited_user_id", Required = Newtonsoft.Json.Required.Always)]
        public double Invited_user_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractSummaryDto
    {
        /// <summary>
        /// Contract status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractSummaryDtoContract_status Contract_status { get; set; }

        /// <summary>
        /// Contract basis type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_basis", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractSummaryDtoContract_basis Contract_basis { get; set; }

        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractTotalsDto Totals { get; set; } = new ContractTotalsDto();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation_id", Required = Newtonsoft.Json.Required.Always)]
        public double Organisation_id { get; set; }

        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.Always)]
        public double Project_id { get; set; }

        [Newtonsoft.Json.JsonProperty("project_category_id", Required = Newtonsoft.Json.Required.Always)]
        public double Project_category_id { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation_contract_type_id", Required = Newtonsoft.Json.Required.Always)]
        public double Organisation_contract_type_id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("invoice_creator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractSummaryDtoInvoice_creator Invoice_creator { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_summary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Contract_summary { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappsListDto
    {
        [Newtonsoft.Json.JsonProperty("total_this_claim", Required = Newtonsoft.Json.Required.Always)]
        [System.Obsolete]
        public double Total_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_seq_no", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_seq_no { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claim_status { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_invoice_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claimant_invoice_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("submitted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Submitted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Approved_at { get; set; }

        [Newtonsoft.Json.JsonProperty("approval_due_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Approval_due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("progresspay2", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Progresspay2 { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("pln", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Pln { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("total_approved_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("total_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Total_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractUpdateDto
    {
        /// <summary>
        /// Contract Reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ref { get; set; }

        /// <summary>
        /// Contract basis type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contract_basis", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractUpdateDtoContract_basis Contract_basis { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractAddressDto Address { get; set; } = new ContractAddressDto();

        [Newtonsoft.Json.JsonProperty("retention", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractRetentionDto Retention { get; set; } = new ContractRetentionDto();

        [Newtonsoft.Json.JsonProperty("lineitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractlineSectionDto> Lineitems { get; set; } = new System.Collections.ObjectModel.Collection<ContractlineSectionDto>();

        [Newtonsoft.Json.JsonProperty("variationitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractlineSectionDto> Variationitems { get; set; } = new System.Collections.ObjectModel.Collection<ContractlineSectionDto>();

        [Newtonsoft.Json.JsonProperty("claim_cycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ContractClaimCycleDto Claim_cycle { get; set; } = new ContractClaimCycleDto();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_signed_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract_signed_date { get; set; }

        [Newtonsoft.Json.JsonProperty("commencement_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commencement_date { get; set; }

        [Newtonsoft.Json.JsonProperty("completion_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Completion_date { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("dlp_num_days", Required = Newtonsoft.Json.Required.Always)]
        public double Dlp_num_days { get; set; }

        [Newtonsoft.Json.JsonProperty("vat_reverse_charge_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Vat_reverse_charge_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("days_to_approve", Required = Newtonsoft.Json.Required.Always)]
        public double Days_to_approve { get; set; }

        [Newtonsoft.Json.JsonProperty("days_to_pay", Required = Newtonsoft.Json.Required.Always)]
        public double Days_to_pay { get; set; }

        [Newtonsoft.Json.JsonProperty("prac_complete_min_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Prac_complete_min_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_primary { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractLinkDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_primary { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractVariationDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_id", Required = Newtonsoft.Json.Required.Always)]
        public double Contract_id { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        public double Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public double Description { get; set; }

        [Newtonsoft.Json.JsonProperty("qty", Required = Newtonsoft.Json.Required.Always)]
        public double Qty { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public double Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("ret_excl_ind", Required = Newtonsoft.Json.Required.Always)]
        public double Ret_excl_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("lump_sum_ind", Required = Newtonsoft.Json.Required.Always)]
        public double Lump_sum_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_primary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_secondary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_secondary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_tertiary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_tertiary { get; set; }

        [Newtonsoft.Json.JsonProperty("approval_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractVariationDtoApproval_status Approval_status { get; set; }

        [Newtonsoft.Json.JsonProperty("unit_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit_type { get; set; }

        [Newtonsoft.Json.JsonProperty("subcontractor_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subcontractor_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("var_origination_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Var_origination_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("forecast_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Forecast_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("private_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Private_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Recoverable_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Recoverable_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_amount", Required = Newtonsoft.Json.Required.Always)]
        public double Recoverable_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("budget_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Budget_status { get; set; }

        [Newtonsoft.Json.JsonProperty("heading", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Heading { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_projected_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Claimant_projected_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_projected_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Claimant_projected_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by_organisation", Required = Newtonsoft.Json.Required.Always)]
        public double Created_by_organisation { get; set; }

        [Newtonsoft.Json.JsonProperty("locked_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Locked_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("variable_budget_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Variable_budget_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Discount_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("can_delete", Required = Newtonsoft.Json.Required.Always)]
        public bool Can_delete { get; set; }

        [Newtonsoft.Json.JsonProperty("can_edit_extref", Required = Newtonsoft.Json.Required.Always)]
        public bool Can_edit_extref { get; set; }

        [Newtonsoft.Json.JsonProperty("read_only", Required = Newtonsoft.Json.Required.Always)]
        public bool Read_only { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractLineDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_id", Required = Newtonsoft.Json.Required.Always)]
        public double Contract_id { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        public double Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public double Description { get; set; }

        [Newtonsoft.Json.JsonProperty("qty", Required = Newtonsoft.Json.Required.Always)]
        public double Qty { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public double Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("ret_excl_ind", Required = Newtonsoft.Json.Required.Always)]
        public double Ret_excl_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("lump_sum_ind", Required = Newtonsoft.Json.Required.Always)]
        public double Lump_sum_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_primary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_secondary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_secondary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_tertiary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_tertiary { get; set; }

        [Newtonsoft.Json.JsonProperty("approval_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractLineDtoApproval_status Approval_status { get; set; }

        [Newtonsoft.Json.JsonProperty("unit_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit_type { get; set; }

        [Newtonsoft.Json.JsonProperty("subcontractor_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subcontractor_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("var_origination_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Var_origination_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("forecast_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Forecast_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("private_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Private_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Recoverable_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Recoverable_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_amount", Required = Newtonsoft.Json.Required.Always)]
        public double Recoverable_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("budget_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Budget_status { get; set; }

        [Newtonsoft.Json.JsonProperty("heading", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Heading { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_projected_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Claimant_projected_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_projected_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Claimant_projected_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by_organisation", Required = Newtonsoft.Json.Required.Always)]
        public double Created_by_organisation { get; set; }

        [Newtonsoft.Json.JsonProperty("locked_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Locked_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("variable_budget_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Variable_budget_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Discount_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("can_delete", Required = Newtonsoft.Json.Required.Always)]
        public bool Can_delete { get; set; }

        [Newtonsoft.Json.JsonProperty("can_edit_extref", Required = Newtonsoft.Json.Required.Always)]
        public bool Can_edit_extref { get; set; }

        [Newtonsoft.Json.JsonProperty("read_only", Required = Newtonsoft.Json.Required.Always)]
        public bool Read_only { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractVariationsDto
    {
        [Newtonsoft.Json.JsonProperty("variationitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractlineSectionDto> Variationitems { get; set; } = new System.Collections.ObjectModel.Collection<ContractlineSectionDto>();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractLineitemsDto
    {
        [Newtonsoft.Json.JsonProperty("lineitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContractlineSectionDto> Lineitems { get; set; } = new System.Collections.ObjectModel.Collection<ContractlineSectionDto>();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractPublishDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PayappStatusGroupEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"approved")]
        Approved = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappsListItemDto
    {
        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_primary { get; set; }

        [Newtonsoft.Json.JsonProperty("project_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Project_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("project_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Project_name { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_id", Required = Newtonsoft.Json.Required.Always)]
        public double Contract_id { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contract_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contract_name { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("vat_reverse_charge_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Vat_reverse_charge_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("counterparty_role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Counterparty_role { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("counterparty_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Counterparty_name { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claim_status { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_id", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_id { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_seq_no", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_seq_no { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_invoice_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claimant_invoice_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_calc", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_calc { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_calc_at_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_calc_at_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_claimed_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_claimed_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_as_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claim_as_at { get; set; }

        [Newtonsoft.Json.JsonProperty("submitted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Submitted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Approved_at { get; set; }

        [Newtonsoft.Json.JsonProperty("approval_due_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Approval_due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_due_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Payment_due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("final_payment_due_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Final_payment_due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("lines_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Lines_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("lines_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Lines_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("materials_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Materials_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("materials_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Materials_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("contra_this_approve", Required = Newtonsoft.Json.Required.Always)]
        public double Contra_this_approve { get; set; }

        [Newtonsoft.Json.JsonProperty("contra_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Contra_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_this_claim_submitted", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_this_claim_submitted { get; set; }

        [Newtonsoft.Json.JsonProperty("pln_is_draft", Required = Newtonsoft.Json.Required.Always)]
        public bool Pln_is_draft { get; set; }

        [Newtonsoft.Json.JsonProperty("pln_variance_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Pln_variance_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("pp_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Pp_status { get; set; }

        [Newtonsoft.Json.JsonProperty("lines_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Lines_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("lines_this_approve", Required = Newtonsoft.Json.Required.Always)]
        public double Lines_this_approve { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("previous_discount", Required = Newtonsoft.Json.Required.Always)]
        public double Previous_discount { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_claimed_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_claimed_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_approved_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_approved_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("previous_retention", Required = Newtonsoft.Json.Required.Always)]
        public double Previous_retention { get; set; }

        [Newtonsoft.Json.JsonProperty("variations_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Variations_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("materials_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Materials_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("materials_this_approve", Required = Newtonsoft.Json.Required.Always)]
        public double Materials_this_approve { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_this_claim_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_this_claim_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("assessed", Required = Newtonsoft.Json.Required.Always)]
        public double Assessed { get; set; }

        [Newtonsoft.Json.JsonProperty("gross_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Gross_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("non_labour_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Non_labour_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("net_approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Net_approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("previous_gross_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Previous_gross_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("previous_net_approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Previous_net_approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("net_approved_before_taxes", Required = Newtonsoft.Json.Required.Always)]
        public double Net_approved_before_taxes { get; set; }

        [Newtonsoft.Json.JsonProperty("discounted_total_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Discounted_total_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("sc_total_projected_amount", Required = Newtonsoft.Json.Required.Always)]
        public double Sc_total_projected_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("mc_total_projected_amount", Required = Newtonsoft.Json.Required.Always)]
        public double Mc_total_projected_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("varations_this_approve", Required = Newtonsoft.Json.Required.Always)]
        public double Varations_this_approve { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MateriallinesLineDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by_organisation", Required = Newtonsoft.Json.Required.Always)]
        public double Created_by_organisation { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("unit_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit_type { get; set; }

        [Newtonsoft.Json.JsonProperty("qty_at_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Qty_at_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("rate_at_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Rate_at_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("qty_at_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Qty_at_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("rate_at_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Rate_at_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("prev_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Prev_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("modification_reason", Required = Newtonsoft.Json.Required.Always)]
        public double Modification_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("modification_reason_comment", Required = Newtonsoft.Json.Required.Always)]
        public double Modification_reason_comment { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("total_activity_count", Required = Newtonsoft.Json.Required.Always)]
        public double Total_activity_count { get; set; }

        [Newtonsoft.Json.JsonProperty("new_activity_count", Required = Newtonsoft.Json.Required.Always)]
        public double New_activity_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MateriallinesHeadingDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MateriallinesLineDto> Nodes { get; set; } = new System.Collections.ObjectModel.Collection<MateriallinesLineDto>();

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MateriallinesSectionDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MateriallinesHeadingDto> Nodes { get; set; } = new System.Collections.ObjectModel.Collection<MateriallinesHeadingDto>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClaimlinesLineDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("claimline", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Claimline { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClaimlinesHeadingDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ClaimlinesLineDto> Nodes { get; set; } = new System.Collections.ObjectModel.Collection<ClaimlinesLineDto>();

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClaimlineSectionDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Nodes3> Nodes { get; set; } = new System.Collections.ObjectModel.Collection<Nodes3>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappsSummaryItemDto
    {
        [Newtonsoft.Json.JsonProperty("original_works", Required = Newtonsoft.Json.Required.Always)]
        public double Original_works { get; set; }

        [Newtonsoft.Json.JsonProperty("contra_charges", Required = Newtonsoft.Json.Required.Always)]
        public double Contra_charges { get; set; }

        [Newtonsoft.Json.JsonProperty("materials", Required = Newtonsoft.Json.Required.Always)]
        public double Materials { get; set; }

        [Newtonsoft.Json.JsonProperty("variations_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Variations_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("variations_on_account", Required = Newtonsoft.Json.Required.Always)]
        public double Variations_on_account { get; set; }

        [Newtonsoft.Json.JsonProperty("variations_rejected", Required = Newtonsoft.Json.Required.Always)]
        public double Variations_rejected { get; set; }

        [Newtonsoft.Json.JsonProperty("revised_works", Required = Newtonsoft.Json.Required.Always)]
        public double Revised_works { get; set; }

        [Newtonsoft.Json.JsonProperty("revised_works_and_voa", Required = Newtonsoft.Json.Required.Always)]
        public double Revised_works_and_voa { get; set; }

        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Always)]
        public double Discount { get; set; }

        [Newtonsoft.Json.JsonProperty("discounted_total", Required = Newtonsoft.Json.Required.Always)]
        public double Discounted_total { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_withheld", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_withheld { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_released", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_released { get; set; }

        [Newtonsoft.Json.JsonProperty("cash_retention", Required = Newtonsoft.Json.Required.Always)]
        public double Cash_retention { get; set; }

        [Newtonsoft.Json.JsonProperty("cash_retention_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Cash_retention_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("net_claim_excl_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Net_claim_excl_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("financeable_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Financeable_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Always)]
        public double Tax { get; set; }

        [Newtonsoft.Json.JsonProperty("net_claim_incl_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Net_claim_incl_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_coefficient", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_coefficient { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappsSummaryDto
    {
        [Newtonsoft.Json.JsonProperty("this_claim", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsSummaryItemDto This_claim { get; set; } = new PayappsSummaryItemDto();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappActionHistoryDto
    {
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Always)]
        public double User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Action { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_at { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappPlnDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("eligible", Required = Newtonsoft.Json.Required.Always)]
        public bool Eligible { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Approved_at { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("adjustments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Adjustments { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappDto
    {
        [Newtonsoft.Json.JsonProperty("materialitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MateriallinesSectionDto> Materialitems { get; set; } = new System.Collections.ObjectModel.Collection<MateriallinesSectionDto>();

        [Newtonsoft.Json.JsonProperty("lineitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ClaimlineSectionDto> Lineitems { get; set; } = new System.Collections.ObjectModel.Collection<ClaimlineSectionDto>();

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsSummaryDto Summary { get; set; } = new PayappsSummaryDto();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_id", Required = Newtonsoft.Json.Required.Always)]
        public double Contract_id { get; set; }

        [Newtonsoft.Json.JsonProperty("organisation_id", Required = Newtonsoft.Json.Required.Always)]
        public double Organisation_id { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_seq_no", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_seq_no { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claim_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claim_status { get; set; }

        [Newtonsoft.Json.JsonProperty("my_role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PayappDtoMy_role My_role { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_as_at_start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claim_as_at_start { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_as_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claim_as_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("submitted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Submitted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Approved_at { get; set; }

        [Newtonsoft.Json.JsonProperty("approval_due_date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Approval_due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("variation_negotiation_enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Variation_negotiation_enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_invoice_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claimant_invoice_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_calc", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_calc { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_calc_at_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_calc_at_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_release_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Retention_release_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_applied", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_applied { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_withheld_override", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_withheld_override { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_excl_release_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_excl_release_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_release_requested", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_release_requested { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_released", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_released { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_released_mod_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Retention_released_mod_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_withheld_mod_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Retention_withheld_mod_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_claimed_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_claimed_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_claimed_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_claimed_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_approved_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_approved_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_previous_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_previous_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_mod_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Labour_mod_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("days_to_approve", Required = Newtonsoft.Json.Required.Always)]
        public double Days_to_approve { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_limit_reached", Required = Newtonsoft.Json.Required.Always)]
        public bool Claim_limit_reached { get; set; }

        [Newtonsoft.Json.JsonProperty("pay_per_claim_credits", Required = Newtonsoft.Json.Required.Always)]
        public double Pay_per_claim_credits { get; set; }

        [Newtonsoft.Json.JsonProperty("acknowledge_instructions", Required = Newtonsoft.Json.Required.Always)]
        public bool Acknowledge_instructions { get; set; }

        [Newtonsoft.Json.JsonProperty("action_history", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PayappActionHistoryDto> Action_history { get; set; } = new System.Collections.ObjectModel.Collection<PayappActionHistoryDto>();

        [Newtonsoft.Json.JsonProperty("contraitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Contraitems { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        [Newtonsoft.Json.JsonProperty("variationitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Variationitems { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("pln", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappPlnDto Pln { get; set; } = new PayappPlnDto();

        [Newtonsoft.Json.JsonProperty("total_works", Required = Newtonsoft.Json.Required.Always)]
        public double Total_works { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("total_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Total_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("total_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Total_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("total_claimed_orig", Required = Newtonsoft.Json.Required.Always)]
        public double Total_claimed_orig { get; set; }

        [Newtonsoft.Json.JsonProperty("total_claimed_var", Required = Newtonsoft.Json.Required.Always)]
        public double Total_claimed_var { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_orig", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_orig { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_var", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_var { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappsLineDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public double Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_line_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Contract_line_type { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("ret_excl_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Ret_excl_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("approval_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Approval_status { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by_organisation", Required = Newtonsoft.Json.Required.Always)]
        public double Created_by_organisation { get; set; }

        [Newtonsoft.Json.JsonProperty("locked_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Locked_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_primary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_primary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_secondary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_secondary { get; set; }

        [Newtonsoft.Json.JsonProperty("external_integration_key_tertiary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string External_integration_key_tertiary { get; set; }

        [Newtonsoft.Json.JsonProperty("qty", Required = Newtonsoft.Json.Required.Always)]
        public double Qty { get; set; }

        [Newtonsoft.Json.JsonProperty("lump_sum_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Lump_sum_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("unit_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit_type { get; set; }

        [Newtonsoft.Json.JsonProperty("variable_budget_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Variable_budget_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("subcontractor_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subcontractor_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("var_origination_ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Var_origination_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("forecast_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Forecast_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("private_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Private_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Recoverable_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("budget_status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Budget_status { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("recoverable_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Recoverable_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Discount_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("recoverable_amount", Required = Newtonsoft.Json.Required.Always)]
        public double Recoverable_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_projected_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Claimant_projected_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_projected_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Claimant_projected_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_line_id", Required = Newtonsoft.Json.Required.Always)]
        public double Contract_line_id { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("approve_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Approve_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("approve_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Approve_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("rate_at_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Rate_at_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("rate_at_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Rate_at_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("status_at_approved", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Status_at_approved { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("modification_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Modification_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("modification_reason_comment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Modification_reason_comment { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("status_at_claimed", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Status_at_claimed { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("qty_at_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Qty_at_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("approve_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Approve_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("qty_at_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Qty_at_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("historical_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Historical_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("ret_excl_ind_at_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Ret_excl_ind_at_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("ret_excl_ind_at_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Ret_excl_ind_at_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_modification_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claimant_modification_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_modification_reason_comment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claimant_modification_reason_comment { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_val_at_end", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_val_at_end { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_line_id", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_line_id { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_claimant_projected_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Contract_claimant_projected_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("contract_claimant_projected_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Contract_claimant_projected_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("prev_claimant_projected_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Prev_claimant_projected_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("prev_claimant_projected_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Prev_claimant_projected_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("claimant_projected_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Claimant_projected_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_projected_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_projected_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_projected_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_projected_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_to_date_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Approved_to_date_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("when_complete", Required = Newtonsoft.Json.Required.Always)]
        public double When_complete { get; set; }

        [Newtonsoft.Json.JsonProperty("total_activity_count", Required = Newtonsoft.Json.Required.Always)]
        public double Total_activity_count { get; set; }

        [Newtonsoft.Json.JsonProperty("new_activity_count", Required = Newtonsoft.Json.Required.Always)]
        public double New_activity_count { get; set; }

        [Newtonsoft.Json.JsonProperty("approve_val_at_end", Required = Newtonsoft.Json.Required.Always)]
        public double Approve_val_at_end { get; set; }

        [Newtonsoft.Json.JsonProperty("this_claim_amt", Required = Newtonsoft.Json.Required.Always)]
        public double This_claim_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("this_claim_qty", Required = Newtonsoft.Json.Required.Always)]
        public double This_claim_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("this_approve_amt", Required = Newtonsoft.Json.Required.Always)]
        public double This_approve_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("this_approve_qty", Required = Newtonsoft.Json.Required.Always)]
        public double This_approve_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("this_claim_pct", Required = Newtonsoft.Json.Required.Always)]
        public double This_claim_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("this_approve_pct", Required = Newtonsoft.Json.Required.Always)]
        public double This_approve_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("respondent_projected_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Respondent_projected_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("projected_difference", Required = Newtonsoft.Json.Required.Always)]
        public double Projected_difference { get; set; }

        [Newtonsoft.Json.JsonProperty("difference_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Difference_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("this_claim_projected_pct", Required = Newtonsoft.Json.Required.Always)]
        public double This_claim_projected_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("this_claim_projected_qty", Required = Newtonsoft.Json.Required.Always)]
        public double This_claim_projected_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("locked_amount", Required = Newtonsoft.Json.Required.Always)]
        public bool Locked_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_rounded", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_rounded { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_withheld_rounded", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_withheld_rounded { get; set; }

        [Newtonsoft.Json.JsonProperty("net_amount_rounded", Required = Newtonsoft.Json.Required.Always)]
        public double Net_amount_rounded { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rounded", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rounded { get; set; }

        [Newtonsoft.Json.JsonProperty("modification_reason_display", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Modification_reason_display { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_to_date_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Approved_to_date_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("pln_revised_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Pln_revised_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("pln_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Pln_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("pln_variance", Required = Newtonsoft.Json.Required.Always)]
        public double Pln_variance { get; set; }

        [Newtonsoft.Json.JsonProperty("pln_this_approved_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Pln_this_approved_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("pln_approve_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Pln_approve_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("works_value", Required = Newtonsoft.Json.Required.Always)]
        public double Works_value { get; set; }

        [Newtonsoft.Json.JsonProperty("variance_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Variance_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("variance_qty", Required = Newtonsoft.Json.Required.Always)]
        public double Variance_qty { get; set; }

        [Newtonsoft.Json.JsonProperty("variance_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Variance_rate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariationTotalsDto
    {
        [Newtonsoft.Json.JsonProperty("works_value", Required = Newtonsoft.Json.Required.Always)]
        public double Works_value { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_to_date_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Approved_to_date_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Claim_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("approve_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Approve_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("approve_amt", Required = Newtonsoft.Json.Required.Always)]
        public double Approve_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("this_claim_pct", Required = Newtonsoft.Json.Required.Always)]
        public double This_claim_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("this_claim_amt", Required = Newtonsoft.Json.Required.Always)]
        public double This_claim_amt { get; set; }

        [Newtonsoft.Json.JsonProperty("this_approve_pct", Required = Newtonsoft.Json.Required.Always)]
        public double This_approve_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("this_approve_amt", Required = Newtonsoft.Json.Required.Always)]
        public double This_approve_amt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContralinesLineDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("created_by_organisation", Required = Newtonsoft.Json.Required.Always)]
        public double Created_by_organisation { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("contra_entity_id", Required = Newtonsoft.Json.Required.Always)]
        public double Contra_entity_id { get; set; }

        [Newtonsoft.Json.JsonProperty("contra_line_id", Required = Newtonsoft.Json.Required.Always)]
        public double Contra_line_id { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("previous_amount", Required = Newtonsoft.Json.Required.Always)]
        public double Previous_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("modification_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Modification_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("modification_reason_comment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Modification_reason_comment { get; set; }

        [Newtonsoft.Json.JsonProperty("entity_created_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Entity_created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("deleted_at", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Deleted_at { get; set; }

        [Newtonsoft.Json.JsonProperty("ret_excl_ind", Required = Newtonsoft.Json.Required.Always)]
        public bool Ret_excl_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_rate", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_rate { get; set; }

        [Newtonsoft.Json.JsonProperty("can_delete", Required = Newtonsoft.Json.Required.Always)]
        public bool Can_delete { get; set; }

        [Newtonsoft.Json.JsonProperty("total_activity_count", Required = Newtonsoft.Json.Required.Always)]
        public double Total_activity_count { get; set; }

        [Newtonsoft.Json.JsonProperty("new_activity_count", Required = Newtonsoft.Json.Required.Always)]
        public double New_activity_count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContralinesHeadingDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContralinesLineDto> Nodes { get; set; } = new System.Collections.ObjectModel.Collection<ContralinesLineDto>();

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContralinesSectionDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("line_ref_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Line_ref_code { get; set; }

        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContralinesHeadingDto> Nodes { get; set; } = new System.Collections.ObjectModel.Collection<ContralinesHeadingDto>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappsInvoicePayappDto
    {
        [Newtonsoft.Json.JsonProperty("approved_variation_lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PayappsLineDto> Approved_variation_lines { get; set; } = new System.Collections.ObjectModel.Collection<PayappsLineDto>();

        [Newtonsoft.Json.JsonProperty("approved_variation_totals", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public VariationTotalsDto Approved_variation_totals { get; set; } = new VariationTotalsDto();

        [Newtonsoft.Json.JsonProperty("rejected_variation_lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PayappsLineDto> Rejected_variation_lines { get; set; } = new System.Collections.ObjectModel.Collection<PayappsLineDto>();

        [Newtonsoft.Json.JsonProperty("rejected_variation_totals", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public VariationTotalsDto Rejected_variation_totals { get; set; } = new VariationTotalsDto();

        [Newtonsoft.Json.JsonProperty("other_variation_lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PayappsLineDto> Other_variation_lines { get; set; } = new System.Collections.ObjectModel.Collection<PayappsLineDto>();

        [Newtonsoft.Json.JsonProperty("other_variation_totals", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public VariationTotalsDto Other_variation_totals { get; set; } = new VariationTotalsDto();

        [Newtonsoft.Json.JsonProperty("lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PayappsLineDto> Lines { get; set; } = new System.Collections.ObjectModel.Collection<PayappsLineDto>();

        [Newtonsoft.Json.JsonProperty("materialitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MateriallinesSectionDto> Materialitems { get; set; } = new System.Collections.ObjectModel.Collection<MateriallinesSectionDto>();

        [Newtonsoft.Json.JsonProperty("contraitems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContralinesSectionDto> Contraitems { get; set; } = new System.Collections.ObjectModel.Collection<ContralinesSectionDto>();

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("claim_as_at_local", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Claim_as_at_local { get; set; }

        [Newtonsoft.Json.JsonProperty("submitted_at_local", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Submitted_at_local { get; set; }

        [Newtonsoft.Json.JsonProperty("approved_at_local", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Approved_at_local { get; set; }

        [Newtonsoft.Json.JsonProperty("total_works", Required = Newtonsoft.Json.Required.Always)]
        public double Total_works { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("total_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Total_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("total_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Total_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("total_claimed_orig", Required = Newtonsoft.Json.Required.Always)]
        public double Total_claimed_orig { get; set; }

        [Newtonsoft.Json.JsonProperty("total_claimed_var", Required = Newtonsoft.Json.Required.Always)]
        public double Total_claimed_var { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_orig", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_orig { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_var", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_var { get; set; }

        [Newtonsoft.Json.JsonProperty("total_works_orig", Required = Newtonsoft.Json.Required.Always)]
        public double Total_works_orig { get; set; }

        [Newtonsoft.Json.JsonProperty("total_works_var_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Total_works_var_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("total_works_var_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Total_works_var_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_to_date_orig", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_to_date_orig { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_to_date_var", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_to_date_var { get; set; }

        [Newtonsoft.Json.JsonProperty("total_variance_var", Required = Newtonsoft.Json.Required.Always)]
        public double Total_variance_var { get; set; }

        [Newtonsoft.Json.JsonProperty("total_variance_orig", Required = Newtonsoft.Json.Required.Always)]
        public double Total_variance_orig { get; set; }

        [Newtonsoft.Json.JsonProperty("total_this_claim_orig", Required = Newtonsoft.Json.Required.Always)]
        public double Total_this_claim_orig { get; set; }

        [Newtonsoft.Json.JsonProperty("total_this_approve_orig", Required = Newtonsoft.Json.Required.Always)]
        public double Total_this_approve_orig { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_to_date_orig_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_to_date_orig_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("total_claimed_orig_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Total_claimed_orig_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_orig_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_orig_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("total_this_claim_orig_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Total_this_claim_orig_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("total_this_approve_orig_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Total_this_approve_orig_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("total_this_claim_var", Required = Newtonsoft.Json.Required.Always)]
        public double Total_this_claim_var { get; set; }

        [Newtonsoft.Json.JsonProperty("total_this_approve_var", Required = Newtonsoft.Json.Required.Always)]
        public double Total_this_approve_var { get; set; }

        [Newtonsoft.Json.JsonProperty("total_works_var", Required = Newtonsoft.Json.Required.Always)]
        public double Total_works_var { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_to_date_var_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_to_date_var_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("total_claimed_var_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Total_claimed_var_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("total_approved_var_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Total_approved_var_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("total_this_claim_var_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Total_this_claim_var_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("total_this_approve_var_pct", Required = Newtonsoft.Json.Required.Always)]
        public double Total_this_approve_var_pct { get; set; }

        [Newtonsoft.Json.JsonProperty("total_works_completed_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Total_works_completed_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("total_net_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Total_net_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("total_net_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Total_net_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("total_net_claim_plus_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Total_net_claim_plus_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("total_net_approve_plus_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Total_net_approve_plus_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("total_gross_claimed_plus_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Total_gross_claimed_plus_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("total_gross_approved_plus_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Total_gross_approved_plus_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_on_gross_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_on_gross_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_on_gross_approve", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_on_gross_approve { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_on_net_claimed", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_on_net_claimed { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_on_net_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_on_net_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("tax_on_total_works", Required = Newtonsoft.Json.Required.Always)]
        public double Tax_on_total_works { get; set; }

        [Newtonsoft.Json.JsonProperty("previous_retention", Required = Newtonsoft.Json.Required.Always)]
        public double Previous_retention { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_withheld_override", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_withheld_override { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_release_requested", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_release_requested { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_released", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_released { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_release_ind", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_release_ind { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_withheld_mod_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Retention_withheld_mod_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_released_mod_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Retention_released_mod_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_calc", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_calc { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_calc_at_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_calc_at_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_applied", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_applied { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_excl_release_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_excl_release_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_calc", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_calc { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_calc_at_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_calc_at_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_previous_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_previous_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_claimed_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_claimed_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_approved_to_date", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_approved_to_date { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_mod_reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Labour_mod_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_previous_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_previous_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_claimed_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_claimed_this_claim { get; set; }

        [Newtonsoft.Json.JsonProperty("labour_approved_this_claim", Required = Newtonsoft.Json.Required.Always)]
        public double Labour_approved_this_claim { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalsItemDto
    {
        [Newtonsoft.Json.JsonProperty("original_works", Required = Newtonsoft.Json.Required.Always)]
        public double Original_works { get; set; }

        [Newtonsoft.Json.JsonProperty("contra_charges", Required = Newtonsoft.Json.Required.Always)]
        public double Contra_charges { get; set; }

        [Newtonsoft.Json.JsonProperty("materials", Required = Newtonsoft.Json.Required.Always)]
        public double Materials { get; set; }

        [Newtonsoft.Json.JsonProperty("variations_approved", Required = Newtonsoft.Json.Required.Always)]
        public double Variations_approved { get; set; }

        [Newtonsoft.Json.JsonProperty("variations_on_account", Required = Newtonsoft.Json.Required.Always)]
        public double Variations_on_account { get; set; }

        [Newtonsoft.Json.JsonProperty("variations_rejected", Required = Newtonsoft.Json.Required.Always)]
        public double Variations_rejected { get; set; }

        [Newtonsoft.Json.JsonProperty("revised_works", Required = Newtonsoft.Json.Required.Always)]
        public double Revised_works { get; set; }

        [Newtonsoft.Json.JsonProperty("revised_works_and_voa", Required = Newtonsoft.Json.Required.Always)]
        public double Revised_works_and_voa { get; set; }

        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Always)]
        public double Discount { get; set; }

        [Newtonsoft.Json.JsonProperty("discounted_total", Required = Newtonsoft.Json.Required.Always)]
        public double Discounted_total { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_withheld", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_withheld { get; set; }

        [Newtonsoft.Json.JsonProperty("retention_released", Required = Newtonsoft.Json.Required.Always)]
        public double Retention_released { get; set; }

        [Newtonsoft.Json.JsonProperty("cash_retention", Required = Newtonsoft.Json.Required.Always)]
        public double Cash_retention { get; set; }

        [Newtonsoft.Json.JsonProperty("cash_retention_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Cash_retention_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("net_claim_excl_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Net_claim_excl_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("financeable_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Financeable_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Always)]
        public double Tax { get; set; }

        [Newtonsoft.Json.JsonProperty("net_claim_incl_tax", Required = Newtonsoft.Json.Required.Always)]
        public double Net_claim_incl_tax { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_revised_works", Required = Newtonsoft.Json.Required.Always)]
        public double Discount_revised_works { get; set; }

        [Newtonsoft.Json.JsonProperty("discounted_total_revised_works", Required = Newtonsoft.Json.Required.Always)]
        public double Discounted_total_revised_works { get; set; }

        [Newtonsoft.Json.JsonProperty("combined_variations", Required = Newtonsoft.Json.Required.Always)]
        public double Combined_variations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalsDto
    {
        [Newtonsoft.Json.JsonProperty("when_complete", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalsItemDto When_complete { get; set; } = new TotalsItemDto();

        [Newtonsoft.Json.JsonProperty("current_claim", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalsItemDto Current_claim { get; set; } = new TotalsItemDto();

        [Newtonsoft.Json.JsonProperty("previous_claim", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalsItemDto Previous_claim { get; set; } = new TotalsItemDto();

        [Newtonsoft.Json.JsonProperty("this_claim", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalsItemDto This_claim { get; set; } = new TotalsItemDto();

        [Newtonsoft.Json.JsonProperty("remaining", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalsItemDto Remaining { get; set; } = new TotalsItemDto();

        [Newtonsoft.Json.JsonProperty("current_claim_submitted", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalsItemDto Current_claim_submitted { get; set; } = new TotalsItemDto();

        [Newtonsoft.Json.JsonProperty("variance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalsItemDto Variance { get; set; } = new TotalsItemDto();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RetentionDto
    {
        [Newtonsoft.Json.JsonProperty("released_variance", Required = Newtonsoft.Json.Required.Always)]
        public double Released_variance { get; set; }

        [Newtonsoft.Json.JsonProperty("released_calculated_value", Required = Newtonsoft.Json.Required.Always)]
        public double Released_calculated_value { get; set; }

        [Newtonsoft.Json.JsonProperty("released_adjusted_value", Required = Newtonsoft.Json.Required.Always)]
        public double Released_adjusted_value { get; set; }

        [Newtonsoft.Json.JsonProperty("calculated_withheld_value", Required = Newtonsoft.Json.Required.Always)]
        public double Calculated_withheld_value { get; set; }

        [Newtonsoft.Json.JsonProperty("withheld_adjusted_value", Required = Newtonsoft.Json.Required.Always)]
        public double Withheld_adjusted_value { get; set; }

        [Newtonsoft.Json.JsonProperty("withheld_variance", Required = Newtonsoft.Json.Required.Always)]
        public double Withheld_variance { get; set; }

        [Newtonsoft.Json.JsonProperty("show_retention", Required = Newtonsoft.Json.Required.Always)]
        public double Show_retention { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganisationLiteDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public double Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address2 { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Postcode { get; set; }

        [Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Province { get; set; }

        [Newtonsoft.Json.JsonProperty("business_number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Business_number { get; set; }

        [Newtonsoft.Json.JsonProperty("md_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Md_name { get; set; }

        [Newtonsoft.Json.JsonProperty("md_phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Md_phone { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappsPdfItemDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        public double Size { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappsPdfsDto
    {
        [Newtonsoft.Json.JsonProperty("submitted_claim", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsPdfItemDto Submitted_claim { get; set; } = new PayappsPdfItemDto();

        [Newtonsoft.Json.JsonProperty("approved_claim", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsPdfItemDto Approved_claim { get; set; } = new PayappsPdfItemDto();

        [Newtonsoft.Json.JsonProperty("approved_claim_summary", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsPdfItemDto Approved_claim_summary { get; set; } = new PayappsPdfItemDto();

        [Newtonsoft.Json.JsonProperty("rcti", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsPdfItemDto Rcti { get; set; } = new PayappsPdfItemDto();

        [Newtonsoft.Json.JsonProperty("paylate_notice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsPdfItemDto Paylate_notice { get; set; } = new PayappsPdfItemDto();

        [Newtonsoft.Json.JsonProperty("cbi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsPdfItemDto Cbi { get; set; } = new PayappsPdfItemDto();

        [Newtonsoft.Json.JsonProperty("stat_dec", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsPdfItemDto Stat_dec { get; set; } = new PayappsPdfItemDto();

        [Newtonsoft.Json.JsonProperty("dor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsPdfItemDto Dor { get; set; } = new PayappsPdfItemDto();

        [Newtonsoft.Json.JsonProperty("pln", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsPdfItemDto Pln { get; set; } = new PayappsPdfItemDto();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayappsInvoiceDto
    {
        [Newtonsoft.Json.JsonProperty("payapp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsInvoicePayappDto Payapp { get; set; } = new PayappsInvoicePayappDto();

        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalsDto Totals { get; set; } = new TotalsDto();

        [Newtonsoft.Json.JsonProperty("retention", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RetentionDto Retention { get; set; } = new RetentionDto();

        [Newtonsoft.Json.JsonProperty("claimant", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OrganisationLiteDto Claimant { get; set; } = new OrganisationLiteDto();

        [Newtonsoft.Json.JsonProperty("respondent", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OrganisationLiteDto Respondent { get; set; } = new OrganisationLiteDto();

        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PayappsPdfsDto Files { get; set; } = new PayappsPdfsDto();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Approval_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TokenRequestDtoGrant_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"password")]
        Password = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"client_credentials")]
        Client_credentials = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RefreshTokenRequestDtoGrant_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"refresh_token")]
        Refresh_token = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProjectClaimCycleDtoReminder_schedule
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MONTHLY")]
        MONTHLY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FORTNIGHTLY")]
        FORTNIGHTLY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProjectContractsDtoStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE")]
        ARCHIVE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractRetentionItemDtoType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PCT ON ALL")]
        PCT_ON_ALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAX DOLLAR")]
        MAX_DOLLAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BANK GTEE")]
        BANK_GTEE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractRoleDtoContract_role_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLAIMANT")]
        CLAIMANT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESPONDENT")]
        RESPONDENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Nodes
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Nodes2
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractClaimCycleDtoReminder_schedule
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_DEFAULT")]
        PROJECT_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MONTHLY")]
        MONTHLY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FORTNIGHTLY")]
        FORTNIGHTLY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractCreateDtoContract_basis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LUMP_SUM")]
        LUMP_SUM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT_OF_MEASURE")]
        UNIT_OF_MEASURE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractDtoContract_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE")]
        ARCHIVE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractDtoContract_basis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LUMP_SUM")]
        LUMP_SUM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT_OF_MEASURE")]
        UNIT_OF_MEASURE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractDtoMy_role
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLAIMANT")]
        CLAIMANT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESPONDENT")]
        RESPONDENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractDtoInvoice_creator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLAIMANT")]
        CLAIMANT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESPONDENT")]
        RESPONDENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractSummaryDtoContract_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVE")]
        ARCHIVE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractSummaryDtoContract_basis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LUMP_SUM")]
        LUMP_SUM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT_OF_MEASURE")]
        UNIT_OF_MEASURE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractSummaryDtoInvoice_creator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLAIMANT")]
        CLAIMANT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESPONDENT")]
        RESPONDENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractUpdateDtoContract_basis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LUMP_SUM")]
        LUMP_SUM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT_OF_MEASURE")]
        UNIT_OF_MEASURE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractVariationDtoApproval_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractLineDtoApproval_status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Nodes3
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PayappDtoMy_role
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLAIMANT")]
        CLAIMANT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESPONDENT")]
        RESPONDENT = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603